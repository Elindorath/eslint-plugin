#! /usr/bin/env -S yarn tsx

import path from 'node:path'
import process from 'node:process'

import { camelCase } from 'case-anything'
import fs from 'fs-extra'
import { packageDirectory } from 'pkg-dir'

import type { ESLint } from 'eslint'

type IndexFileType = keyof Omit<ESLint.Plugin, keyof ESLint.ObjectMetaProperties>

try {
  const packageDirectoryPath = await getPackageDirectory()
  const header = `\
/**
 * DO NOT EDIT THIS FILE WHICH WAS GENERATED BY '${path.relative(packageDirectoryPath, import.meta.filename)}'.
 */`

  await generateIndex('environments', header)
  await generateIndex('languages', header)
  await generateIndex('processors', header)
  await generateIndex('rules', header)
} catch (error) {
  console.error(error)
  process.exitCode = 1
}

async function generateIndex(type: IndexFileType, header: string) {
  const fileNames = await fs.readdir(path.resolve(import.meta.dirname, `../src/${type}`))
  const sanitizedFileNames = fileNames.filter((fileName) => {
    return !fileName.startsWith('.gitkeep') && !fileName.endsWith('.ts')
  })
  const targetFile = path.resolve(import.meta.dirname, `../src/${type}.ts`)

  const dependencyDescriptors = sanitizedFileNames.map((fileName) => {
    const exportedName = path.basename(fileName, '.ts')
    const variableName = camelCase(exportedName)

    return {
      exportedName,
      fileName,
      variableName,
    }
  })

  const importDeclarations = dependencyDescriptors.map(({ fileName, variableName }) => {
    return `import { ${variableName} } from '${fileName}'`
  })

  const exportDeclarations = dependencyDescriptors.map(({ exportedName, variableName }) => {
    return `  '${exportedName}': ${variableName},`
  })

  const fileContent = `\
${header}
${importDeclarations.length > 0
  ? `\n${importDeclarations.join('\n')}\n`
  : ''}
export const ${type} = {${
  exportDeclarations.length > 0
    ? `\n${exportDeclarations.join('\n')}\n`
    : ''
}}
`

  await fs.outputFile(targetFile, fileContent)
}

async function getPackageDirectory() {
  const packageDirectoryPath = await packageDirectory()

  if (packageDirectoryPath === undefined) {
    throw new Error('No relative package.json found')
  }

  return packageDirectoryPath
}
