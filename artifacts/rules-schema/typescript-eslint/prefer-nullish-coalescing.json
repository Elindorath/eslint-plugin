[
  {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
        "type": "boolean",
        "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
      },
      "ignoreBooleanCoercion": {
        "type": "boolean",
        "description": "Whether to ignore arguments to the `Boolean` constructor"
      },
      "ignoreConditionalTests": {
        "type": "boolean",
        "description": "Whether to ignore cases that are located within a conditional test."
      },
      "ignoreIfStatements": {
        "type": "boolean",
        "description": "Whether to ignore any if statements that could be simplified by using the nullish coalescing operator."
      },
      "ignoreMixedLogicalExpressions": {
        "type": "boolean",
        "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with `&&`)."
      },
      "ignorePrimitives": {
        "description": "Whether to ignore all (`true`) or some (an object with properties) primitive types.",
        "oneOf": [
          {
            "type": "object",
            "description": "Which primitives types may be ignored.",
            "properties": {
              "bigint": {
                "type": "boolean",
                "description": "Ignore bigint primitive types."
              },
              "boolean": {
                "type": "boolean",
                "description": "Ignore boolean primitive types."
              },
              "number": {
                "type": "boolean",
                "description": "Ignore number primitive types."
              },
              "string": {
                "type": "boolean",
                "description": "Ignore string primitive types."
              }
            }
          },
          {
            "type": "boolean",
            "description": "Ignore all primitive types.",
            "enum": [
              true
            ]
          }
        ]
      },
      "ignoreTernaryTests": {
        "type": "boolean",
        "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator."
      }
    }
  }
]
